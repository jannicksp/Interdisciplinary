// <auto-generated />
using System;
using Interdisciplinary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Interdisciplinary.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201209115413_Gaaaarrrrggghh4")]
    partial class Gaaaarrrrggghh4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Interdisciplinary.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Alkohol"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Mixer"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Garnish"
                        });
                });

            modelBuilder.Entity("Interdisciplinary.Models.Drink", b =>
                {
                    b.Property<int>("DrinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsCreated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DrinkId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            DrinkId = 1,
                            IsCreated = false,
                            Name = "Vodka Juice"
                        },
                        new
                        {
                            DrinkId = 2,
                            IsCreated = false,
                            Name = "Rum and Coke"
                        },
                        new
                        {
                            DrinkId = 3,
                            IsCreated = false,
                            Name = "Gin and Tonic"
                        },
                        new
                        {
                            DrinkId = 4,
                            IsCreated = false,
                            Name = "Margarita"
                        },
                        new
                        {
                            DrinkId = 5,
                            IsCreated = false,
                            Name = "Cosmopolitan"
                        },
                        new
                        {
                            DrinkId = 6,
                            IsCreated = false,
                            Name = "Gin Martini"
                        },
                        new
                        {
                            DrinkId = 7,
                            IsCreated = false,
                            Name = "Vodka Martini"
                        },
                        new
                        {
                            DrinkId = 8,
                            IsCreated = false,
                            Name = "Mojito"
                        },
                        new
                        {
                            DrinkId = 9,
                            IsCreated = false,
                            Name = "Whiskey Sour"
                        },
                        new
                        {
                            DrinkId = 10,
                            IsCreated = false,
                            Name = "Daiquiri"
                        },
                        new
                        {
                            DrinkId = 11,
                            IsCreated = false,
                            Name = "Tequila Sunrise"
                        });
                });

            modelBuilder.Entity("Interdisciplinary.Models.DrinkIngredient", b =>
                {
                    b.Property<int>("DrinkIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DrinkId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.HasKey("DrinkIngredientId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("IngredientId");

                    b.ToTable("DrinkIngredients");

                    b.HasData(
                        new
                        {
                            DrinkIngredientId = 1,
                            Amount = "2cl",
                            DrinkId = 1,
                            IngredientId = 4
                        },
                        new
                        {
                            DrinkIngredientId = 2,
                            Amount = "6cl",
                            DrinkId = 1,
                            IngredientId = 8
                        },
                        new
                        {
                            DrinkIngredientId = 3,
                            Amount = "",
                            DrinkId = 1,
                            IngredientId = 18
                        },
                        new
                        {
                            DrinkIngredientId = 4,
                            Amount = "2cl",
                            DrinkId = 2,
                            IngredientId = 2
                        },
                        new
                        {
                            DrinkIngredientId = 5,
                            Amount = "6cl",
                            DrinkId = 2,
                            IngredientId = 9
                        },
                        new
                        {
                            DrinkIngredientId = 6,
                            Amount = "",
                            DrinkId = 2,
                            IngredientId = 18
                        },
                        new
                        {
                            DrinkIngredientId = 7,
                            Amount = "2cl",
                            DrinkId = 3,
                            IngredientId = 1
                        },
                        new
                        {
                            DrinkIngredientId = 8,
                            Amount = "6cl",
                            DrinkId = 3,
                            IngredientId = 7
                        },
                        new
                        {
                            DrinkIngredientId = 9,
                            Amount = "",
                            DrinkId = 3,
                            IngredientId = 18
                        },
                        new
                        {
                            DrinkIngredientId = 10,
                            Amount = "3 slices",
                            DrinkId = 3,
                            IngredientId = 20
                        },
                        new
                        {
                            DrinkIngredientId = 11,
                            Amount = "4cl",
                            DrinkId = 4,
                            IngredientId = 5
                        },
                        new
                        {
                            DrinkIngredientId = 12,
                            Amount = "2cl",
                            DrinkId = 4,
                            IngredientId = 6
                        },
                        new
                        {
                            DrinkIngredientId = 13,
                            Amount = "2cl",
                            DrinkId = 4,
                            IngredientId = 11
                        },
                        new
                        {
                            DrinkIngredientId = 14,
                            Amount = "For the rim",
                            DrinkId = 4,
                            IngredientId = 21
                        },
                        new
                        {
                            DrinkIngredientId = 15,
                            Amount = "Fill as desired",
                            DrinkId = 4,
                            IngredientId = 19
                        },
                        new
                        {
                            DrinkIngredientId = 16,
                            Amount = "3cl",
                            DrinkId = 5,
                            IngredientId = 4
                        },
                        new
                        {
                            DrinkIngredientId = 17,
                            Amount = "2cl",
                            DrinkId = 5,
                            IngredientId = 6
                        },
                        new
                        {
                            DrinkIngredientId = 18,
                            Amount = "1cl",
                            DrinkId = 5,
                            IngredientId = 11
                        },
                        new
                        {
                            DrinkIngredientId = 19,
                            Amount = "1cl",
                            DrinkId = 5,
                            IngredientId = 14
                        },
                        new
                        {
                            DrinkIngredientId = 20,
                            Amount = "5cl",
                            DrinkId = 6,
                            IngredientId = 1
                        },
                        new
                        {
                            DrinkIngredientId = 21,
                            Amount = "1cl",
                            DrinkId = 6,
                            IngredientId = 16
                        },
                        new
                        {
                            DrinkIngredientId = 22,
                            Amount = "1-3",
                            DrinkId = 6,
                            IngredientId = 22
                        },
                        new
                        {
                            DrinkIngredientId = 23,
                            Amount = "5cl",
                            DrinkId = 7,
                            IngredientId = 4
                        },
                        new
                        {
                            DrinkIngredientId = 24,
                            Amount = "1cl",
                            DrinkId = 7,
                            IngredientId = 16
                        },
                        new
                        {
                            DrinkIngredientId = 25,
                            Amount = "1-3",
                            DrinkId = 7,
                            IngredientId = 22
                        },
                        new
                        {
                            DrinkIngredientId = 26,
                            Amount = "4cl",
                            DrinkId = 8,
                            IngredientId = 3
                        },
                        new
                        {
                            DrinkIngredientId = 27,
                            Amount = "1cl",
                            DrinkId = 8,
                            IngredientId = 11
                        },
                        new
                        {
                            DrinkIngredientId = 28,
                            Amount = "0.5cl",
                            DrinkId = 8,
                            IngredientId = 15
                        },
                        new
                        {
                            DrinkIngredientId = 29,
                            Amount = "3",
                            DrinkId = 8,
                            IngredientId = 23
                        },
                        new
                        {
                            DrinkIngredientId = 30,
                            Amount = "4cl",
                            DrinkId = 9,
                            IngredientId = 17
                        },
                        new
                        {
                            DrinkIngredientId = 31,
                            Amount = "1cl",
                            DrinkId = 9,
                            IngredientId = 12
                        },
                        new
                        {
                            DrinkIngredientId = 32,
                            Amount = "1 teaspoon",
                            DrinkId = 9,
                            IngredientId = 24
                        },
                        new
                        {
                            DrinkIngredientId = 33,
                            Amount = "4cl",
                            DrinkId = 10,
                            IngredientId = 3
                        },
                        new
                        {
                            DrinkIngredientId = 34,
                            Amount = "2cl",
                            DrinkId = 10,
                            IngredientId = 15
                        },
                        new
                        {
                            DrinkIngredientId = 35,
                            Amount = "2cl",
                            DrinkId = 10,
                            IngredientId = 11
                        },
                        new
                        {
                            DrinkIngredientId = 36,
                            Amount = "2cl",
                            DrinkId = 11,
                            IngredientId = 5
                        },
                        new
                        {
                            DrinkIngredientId = 37,
                            Amount = "1cl",
                            DrinkId = 11,
                            IngredientId = 13
                        },
                        new
                        {
                            DrinkIngredientId = 38,
                            Amount = "4cl",
                            DrinkId = 11,
                            IngredientId = 8
                        });
                });

            modelBuilder.Entity("Interdisciplinary.Models.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IngredientId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            IngredientId = 1,
                            CategoryId = 1,
                            Name = "Gin"
                        },
                        new
                        {
                            IngredientId = 2,
                            CategoryId = 1,
                            Name = "Dark Rum"
                        },
                        new
                        {
                            IngredientId = 3,
                            CategoryId = 1,
                            Name = "Light Rum"
                        },
                        new
                        {
                            IngredientId = 4,
                            CategoryId = 1,
                            Name = "Vodka"
                        },
                        new
                        {
                            IngredientId = 5,
                            CategoryId = 1,
                            Name = "Tequila"
                        },
                        new
                        {
                            IngredientId = 6,
                            CategoryId = 1,
                            Name = "Cointreau"
                        },
                        new
                        {
                            IngredientId = 7,
                            CategoryId = 2,
                            Name = "Tonic"
                        },
                        new
                        {
                            IngredientId = 8,
                            CategoryId = 2,
                            Name = "Orange Juice"
                        },
                        new
                        {
                            IngredientId = 9,
                            CategoryId = 2,
                            Name = "Cola"
                        },
                        new
                        {
                            IngredientId = 10,
                            CategoryId = 2,
                            Name = "Sprite"
                        },
                        new
                        {
                            IngredientId = 11,
                            CategoryId = 2,
                            Name = "Lime Juice"
                        },
                        new
                        {
                            IngredientId = 12,
                            CategoryId = 2,
                            Name = "Lemon Juice"
                        },
                        new
                        {
                            IngredientId = 13,
                            CategoryId = 2,
                            Name = "Grenadine"
                        },
                        new
                        {
                            IngredientId = 14,
                            CategoryId = 2,
                            Name = "Cranberry Juice"
                        },
                        new
                        {
                            IngredientId = 15,
                            CategoryId = 2,
                            Name = "Sugar Syrup"
                        },
                        new
                        {
                            IngredientId = 16,
                            CategoryId = 1,
                            Name = "Dry Vermouth"
                        },
                        new
                        {
                            IngredientId = 17,
                            CategoryId = 1,
                            Name = "Whiskey"
                        },
                        new
                        {
                            IngredientId = 18,
                            CategoryId = 3,
                            Name = "Ice Cubes"
                        },
                        new
                        {
                            IngredientId = 19,
                            CategoryId = 3,
                            Name = "Crushed Ice"
                        },
                        new
                        {
                            IngredientId = 20,
                            CategoryId = 3,
                            Name = "Lime slices"
                        },
                        new
                        {
                            IngredientId = 21,
                            CategoryId = 3,
                            Name = "Salt"
                        },
                        new
                        {
                            IngredientId = 22,
                            CategoryId = 3,
                            Name = "Olive"
                        },
                        new
                        {
                            IngredientId = 23,
                            CategoryId = 3,
                            Name = "Mint Leaves"
                        },
                        new
                        {
                            IngredientId = 24,
                            CategoryId = 3,
                            Name = "Sugar"
                        });
                });

            modelBuilder.Entity("Interdisciplinary.Models.ViewModels.IngredientViewModel", b =>
                {
                    b.Property<int>("IngredientViewModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DrinkId")
                        .HasColumnType("int");

                    b.Property<string>("DrinkName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<string>("IngredientName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IngredientViewModelId");

                    b.ToTable("IngredientsView");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Interdisciplinary.Models.DrinkIngredient", b =>
                {
                    b.HasOne("Interdisciplinary.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Interdisciplinary.Models.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Interdisciplinary.Models.Ingredient", b =>
                {
                    b.HasOne("Interdisciplinary.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
